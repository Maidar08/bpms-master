package mn.erin.domain.bpm.model.process;import java.io.Serializable;import java.time.LocalDateTime;import java.util.Map;import mn.erin.domain.base.model.Entity;/** * @author Zorig */public class Process implements Entity<Process>{  private final ProcessInstanceId id;  private final LocalDateTime startedTime;  private LocalDateTime finishedTime;  private String createdUser;  private String processTypeCategory;  private final Map<ParameterEntityType, Map<String, Serializable>> processParameters;  public Process(ProcessInstanceId id, LocalDateTime startedTime, LocalDateTime finishedTime,      String createdUser, String processTypeCategory, Map<ParameterEntityType, Map<String, Serializable>> processParameters)  {    this.id = id;    this.startedTime = startedTime;    this.finishedTime = finishedTime;    this.createdUser = createdUser;    this.processTypeCategory = processTypeCategory;    this.processParameters = processParameters;  }  public Process(ProcessInstanceId id, LocalDateTime startedTime,      Map<ParameterEntityType, Map<String, Serializable>> processParameters)  {    this.id = id;    this.startedTime = startedTime;    this.processParameters = processParameters;  }  public ProcessInstanceId getId()  {    return id;  }  public LocalDateTime getStartedTime()  {    return startedTime;  }  public LocalDateTime getFinishedTime()  {    return finishedTime;  }  public void setFinishedTime(LocalDateTime finishedTime)  {    this.finishedTime = finishedTime;  }  public Map<ParameterEntityType, Map<String, Serializable>> getProcessParameters()  {    return processParameters;  }  public String getCreatedUser() { return createdUser; }  public void setCreatedUser(String createdUser) { this.createdUser = createdUser; }  public String getProcessTypeCategory() { return processTypeCategory; }  public void setProcessTypeCategory(String processTypeCategory) { this.processTypeCategory = processTypeCategory; }  @Override  public boolean sameIdentityAs(Process other)  {    return false;  }}